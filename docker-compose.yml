services:
  db:
    image: postgres
    restart: unless-stopped
    environment:
      - PGUSER=${POSTGRES_USER}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
    ports:
      - '127.0.0.1:${POSTGRES_PORT}:5432'
    volumes: 
      - './.data/postgres:/var/lib/postgresql/data'
    networks:
      - titanic
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 15
    ulimits:
      nofile:
        soft: 8192
        hard: 32456

  migrations:
    image: migrate/migrate
    restart: no
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - './migrations:/migrations'
    networks:
      - titanic
    links:
      - db:db
    command: -path=/migrations/ -database postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_USER}?sslmode=disable up

  cache:
    image: redis:8
    restart: unless-stopped
    ports:
      - '127.0.0.1:${REDIS_PORT}:6379'
    command: redis-server --save 20 1
    networks:
      - titanic
    volumes: 
      - './.data/redis/data:/root/redis'
      - './.data/redis/config:/usr/local/etc/redis'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  anchor:
    build: ./bancho
    restart: unless-stopped
    env_file:
      - '.env'
    environment:
      - POSTGRES_HOST=db
      - REDIS_HOST=cache
      - BANCHO_HTTP_PORT=80
      - BANCHO_IRC_PORT=6667
      - BANCHO_TCP_PORTS=[13380, 13381, 13382, 13383, 13384]
    networks:
      - titanic
    links:
      - db:db
      - cache:cache
    ports:
      # Uncomment to access http bancho from outside
      # - 127.0.0.1:5050:80
      - 6667:6667
      - 13380:13380
      - 13381:13381
      - 13382:13382
      - 13383:13383
      - 13384:13384
    volumes:
      - './.data:/bancho/.data'
      - './.data/logs/bancho:/bancho/logs'
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    ulimits:
      nofile:
        soft: 16384
        hard: 32768
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10

  deck:
    build: ./web/deck
    restart: unless-stopped
    env_file:
      - '.env'
    environment:
      - POSTGRES_HOST=db
      - REDIS_HOST=cache
    networks:
      - titanic
    links:
      - db:db
      - cache:cache
    # ports:
      # Uncomment to access deck from outside
      # - 127.0.0.1:6060:80
    volumes:
      - './.data:/deck/.data'
      - './.data/logs/deck:/deck/logs'
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 10

  bot:
    build: ./bot
    restart: on-failure
    env_file:
      - '.env'
    environment:
      - POSTGRES_HOST=db
      - REDIS_HOST=cache
    networks:
      - titanic
    links:
      - db:db
      - cache:cache
    volumes:
      - './.data:/bot/.data'
      - './.data/logs/bot:/bot/logs'
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully

  stern:
    build: ./web/stern
    restart: unless-stopped
    env_file:
      - '.env'
    environment:
      - POSTGRES_HOST=db
      - REDIS_HOST=cache
    networks:
      - titanic
    links:
      - db:db
      - cache:cache
    # ports:
      # Uncomment to access stern from outside
      # - 127.0.0.1:7070:80
    volumes:
      - './.data/logs/stern:/stern/logs'
      - './.data:/stern/.data'
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 10

  nginx:
    image: nginx:latest
    restart: unless-stopped
    env_file:
      - '.env'
    environment:
      - DOLLAR=$$
    ports:
      - "${NGINX_HOST}:${NGINX_PORT}:80"
    networks:
      - titanic
    links:
      - anchor:anchor
      - deck:deck
      - stern:stern
      - keel:keel
    volumes:
      - './web/nginx/templates:/etc/nginx/templates'
      - './web/nginx/nginx.conf:/etc/nginx/nginx.conf'
    command: /bin/bash -c "envsubst < /etc/nginx/templates/default.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"

  jobs:
    build: ./jobs
    restart: unless-stopped
    env_file:
      - '.env'
    environment:
      - POSTGRES_HOST=db
      - REDIS_HOST=cache
    links:
      - db:db
      - cache:cache
    networks:
      - titanic
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    entrypoint: python3 main.py --file ./schedule.prod.json

  keel:
    build: ./web/keel
    restart: unless-stopped
    env_file:
      - '.env'
    environment:
      - POSTGRES_HOST=db
      - REDIS_HOST=cache
    networks:
      - titanic
    links:
      - db:db
      - cache:cache
    # ports:
      # Uncomment to access keel from outside
      # - 127.0.0.1:8090:80
    volumes:
      - './.data/logs/keel:/keel/logs'
      - './.data:/keel/.data'
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/stats || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 10

networks:
  titanic:
    driver: bridge
